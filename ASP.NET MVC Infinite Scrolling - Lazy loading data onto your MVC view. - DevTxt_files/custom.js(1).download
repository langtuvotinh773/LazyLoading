
/**
 * @fileoverview Custom functionality to apply throughout every adsize. This
 * has a dependency on common.js and utils.js
 */
var custom = (function() {

  /**
   * Classes which our JS hooks into. Add more class names as necessary.
   * @enum
   * @private
   */
  var elementClass_ = {
    item: 'js-item',
    itemName: 'js-item-name',
    itemPrice: 'js-item-price',
    itemSalePrice: 'js-item-salePrice',
    itemRegularPrice: 'js-item-regularPrice',
    itemCTA: 'js-item-cta-on'
  };


    var elementId_ = {
    arrowPrevious: 'arrow-left',
    arrowNext: 'arrow-right',
    galleryHolder: 'gallery-holder',
    gpaDataProvider: 'gpa-data-provider'
  };

  /**
   * Initialization. Called from handleAdInitialized on each page.
   */
  function init() {
    utils.log('custom.init()');
    var data = common.getAdData();
    if (!data) return;

    // If you're using the swipe gallery to display feed items.
    initItemsUsingGallery_();
    console.log("init");

    // If you're NOT using the swipe gallery to display feed items.
    //initItemsWithoutGallery_();


  }

  /**
   * Find all items used in the swipe gallery and initialize custom behavior.
   * @private
   */
  function initItemsUsingGallery_() {
    console.log("start");
    var gallery = common.getGallery();

    // Apply settings to each item in the gallery
    var items = gallery.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
    console.log("end");
  }

  /**
   * Find all items used outside the gallery and initialize custom behavior.
   * @private
   */
  function initItemsWithoutGallery_() {
    // Apply settings to each item
    var items = document.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Set the display settings for each item.
   * Add any custom functionality you need applied on load.
   * @param {Element} item Item element.
   * @private
   */
  function initItemDisplay_(item) {
    console.log("init item display");

    // if you're using sales prices.
    setSalePricesDisplay_(item);

    // Set mouseout.
    itemMouseOut(item);
  }

  /**
   * Sets the 3 price elements to display correctly when using sales price.
   * Find your price elements and set into common functionality.
   * @param {Element} item Item element.
   * @private
   */
  function setSalePricesDisplay_(item) {
    // Get reference to each price element.
    console.log("set prices");
    var itemPrice = item.querySelector('.' + elementClass_.itemPrice);
    var itemSalePrice = item.querySelector('.' + elementClass_.itemSalePrice);
    var itemRegularPrice = item.querySelector('.' + elementClass_.itemRegularPrice);

    // Sets each item to display correct prices.
    common.displayCorrectPrices(itemPrice, itemSalePrice, itemRegularPrice);
  }

  /**
   * Custom Item Mouse Interactions. Add your own behavior.
   */

  /**
   * Custom Mouseover interaction functionality.
   * @param {Element} item
   */
  function itemMouseOver(item) {
    var itemCTA = item.querySelector('.' + elementClass_.itemCTA);
    itemCTA.style.opacity = 1;

  }

  /**
   * Custom Mouseout interaction functionality.
   * @param {Element} item
   */
  function itemMouseOut(item) {
    var itemCTA = item.querySelector('.' + elementClass_.itemCTA);
    itemCTA.style.opacity = 0;

  }



 // Manipulate 'Price Discount Percentage' from a fraction to whole number & more

function transformDynamicData () {
   console.log("test")
   var dataProvider = document.querySelector('#' + elementId_.gpaDataProvider);
   dataProvider.addDataTransformer(function(dynamicData) {
     var aryProducts = dynamicData.Product;
     if(!aryProducts) return;
     for(var i = 0; i < aryProducts.length; i++ ){
       var discountData = aryProducts[i].salePercentDiscount;
       if (discountData != null && discountData > 0 && discountData < 1) {
         var discountText = "-" + Math.round(discountData * 100) + "%";
         aryProducts[i].salePercentDiscount = discountText;
       }
     }
   });
 }

 function removeCentsFromString(price){
  if(! price) return;
  var matcher = /(\.|\.)0{2}(?![\d])/;
  return price.replace(matcher, '');
 }

  /**
 * Custom updates per frame shown event.
 * @param {Event event
 */
function galleryFrameShown(event) {
  var gallery = common.getGallery();
  var itemsLength = gallery.frameCount;
  var indexFirst = common.getGalleryFrameIndexFirst(event);
  var indexLast = common.getGalleryFrameIndexLast(event);
  var arrowPrevious = utils.getElement(elementId_.arrowPrevious);
  var arrowNext = utils.getElement(elementId_.arrowNext);

  if (itemsLength < 2) {
    utils.showElement(arrowPrevious, false);
    utils.showElement(arrowNext, false);
    return;
  }
  if (indexFirst > 0) {
    utils.showElement(arrowPrevious, true);
  } else {
    utils.showElement(arrowPrevious, false);
  }
  if (indexLast < itemsLength - 1) {
    utils.showElement(arrowNext, true);
  } else {
    utils.showElement(arrowNext, false);
  }
}

  return {
    init: init,
    itemMouseOver: itemMouseOver,
    itemMouseOut: itemMouseOut,
    galleryFrameShown: galleryFrameShown,
    transformDynamicData:transformDynamicData
  };

})();
