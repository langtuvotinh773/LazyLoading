@using MvcInfiniteScrollGridDemo.Models
@{
    ViewBag.Title = "Demo Home";
}
<div class="jumbotron">
    <h1>ASP.NET MVC Infinite Scroll Demo</h1>
    <p class="lead">
        Here's a table of data. Instead of loading all <span class="text-primary">@ViewBag.TotalNumberCustomers</span> items, let's load them only when the user calls for them.
        This technique can be used with any HTML element that holds repeating items. This demo uses <code>&lt;table&gt;</code>, but you can use <code>&lt;div&gt;</code> or <code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code> as you need.
    </p>
</div>
<h2>Customer Demo</h2>
<p>
    This table starts off with <span class="text-primary">@ViewBag.RecordsPerPage</span> items. Scroll down on this page. You'll see that rows are added as you scroll down.
    The app will deliver <span class="text-primary">@ViewBag.RecordsPerPage </span> items at a time, up to its max of <span class="text-primary">@ViewBag.TotalNumberCustomers</span>.
</p>
<table class="table table-striped table-bordered table-condensed infinite-scroll">
    <thead>
        <tr>
            <th>Row</th>
            <th>Employee ID #</th>
            <th>Name</th>
            <th>Address</th>
            <th>Email</th>
        </tr>
    </thead>
    <tbody>
        @Html.Partial("_CustomerRow", (ViewBag.Customers as Dictionary<int, Customer>))
    </tbody>
</table>
@Html.Partial("_Loading")
@section scripts{
    <script src="~/Scripts/infiniteScroll.js"></script>
    <script type="text/javascript">
        $(function () {
            $("div#loading").hide();
        });
        var moreRowsUrl = '@Url.RouteUrl("CustomerList")';
        $(window).scroll(scrollHandler);
    </script>
}